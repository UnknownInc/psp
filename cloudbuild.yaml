steps:
# Decrypt the file containing the github ssh key
# - name: 'gcr.io/cloud-builders/gcloud'
#   args:
#   - kms
#   - decrypt
#   - --ciphertext-file=id_rsa.enc
#   - --plaintext-file=/root/.ssh/id_rsa
#   - --location=global
#   - --keyring=pspkeyring
#   - --key=githubkey
#   volumes:
#   - name: 'ssh'
#     path: /root/.ssh
# Set up git with key and domain.
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud kms decrypt \
    --ciphertext-file=id_rsa.enc \
    --plaintext-file=/root/.ssh/id_rsa \
    --location=global \
    --keyring=pspkeyring \
    --key=githubkey
    chmod 600 /root/.ssh/id_rsa
    cat <<EOF >/root/.ssh/config
    Hostname github.com
    IdentityFile /root/.ssh/id_rsa
    EOF
    mv known_hosts /root/.ssh/known_hosts
    echo $(perl -pe 's/^((\d+\.)*)(\d+)(.*)$/$1.($3+1).$4/e' < VERSION)
  volumes:
  - name: 'ssh'
    path: /root/.ssh
- name: gcr.io/cloud-builders/gcloud
  args:
  - kms
  - decrypt
  - --ciphertext-file=secrets.json.enc
  - --plaintext-file=secrets.json
  - --location=global
  - --keyring=pspkeyring
  - --key=uisecrets
# build the container image
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', 
  '--build-arg',
  'BUILDID=${BUILD_ID}',
  '--build-arg',
  'COMMITID=${SHORT_SHA}',
  '-t', 
  'gcr.io/$PROJECT_ID/psp-${BRANCH_NAME}:latest',
  '-t', 
  'gcr.io/$PROJECT_ID/psp-${BRANCH_NAME}:$SHORT_SHA',  
  '.']
# This step clones the psp-env repository & checkout dev
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: bash
  args:
  - '-c'
  - |
    git clone git@github.com:UnknownInc/psp-env.git
    cd psp-env && \
    git checkout dev && \
    git config user.email $(gcloud auth list --filter=status:ACTIVE --format='value(account)') 
  volumes:
  - name: 'ssh'
    path: /root/.ssh
- name: 'gcr.io/cloud-builders/go'
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    export GOPATH=/root/go
    export PATH=$$PATH:$$GOPATH/bin
    echo $$PATH
    go get -u gopkg.in/mikefarah/yq.v2
    cd psp-env && \
    yq.v2 w -i values.yaml psp.image.repository gcr.io/ind-si-infra-managment-184960/psp-${BRANCH_NAME} && \
    yq.v2 w -i values.yaml psp.image.tag ${SHORT_SHA}
# This step pushes the manifest back to psp-env
- name: 'gcr.io/cloud-builders/gcloud'
  id: Push manifest
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    set -x && \
    cd psp-env && \
    git add values.yaml && \
    git commit -m "Deploying image gcr.io/${PROJECT_ID}/psp-${BRANCH_NAME}:${SHORT_SHA}
    Built from commit ${COMMIT_SHA} of repository psp
    Author: $(git log --format='%an <%ae>' -n 1 HEAD)" && \
    git push origin dev 
  volumes:
  - name: 'ssh'
    path: /root/.ssh
substitutions:
  _CLUSTER_NAME: 'psp-cluster-1'
  _CLUSTER_LOCATION: 'us-central1-a'
options:
  substitution_option: 'ALLOW_LOOSE'
images:
- gcr.io/$PROJECT_ID/psp-${BRANCH_NAME}:latest
- gcr.io/$PROJECT_ID/psp-${BRANCH_NAME}:$SHORT_SHA

#reference https://cloud.google.com/cloud-build/docs/build-config
# steps:
# - name: string
#   args: [string, string, ...]
#   env: [string, string, ...]
#   dir: string
#   id: string
#   waitFor: string
#   entrypoint: string
#   secretEnv: string
#   volumes: object(Volume)
#   timeout: string (Duration format)
# - name: string
#   ...
# - name: string
#   ...
# timeout: string (Duration format)
# logsBucket: string
# options:
#  sourceProvenanceHash: enum(HashType)
#  machineType: enum(MachineType)
#  diskSizeGb: string (int64 format)
#  substitutionOption: enum(SubstitutionOption)
#  logStreamingOption: enum(LogStreamingOption)
#  logging: enum(LoggingMode)
# substitutions: map (key: string, value: string)
# tags: [string, string, ...]
# secrets: object(Secret)
# images:
# - [string, string, ...]
# artifacts: object (Artifacts)

# secrets:
# - kmsKeyName: projects/[PROJECT-ID]/locations/global/keyRings/[KEYRING-NAME]/cryptoKeys/[KEY-NAME]
#   secretEnv:
#     MY_SECRET: <base64-encoded encrypted secret>